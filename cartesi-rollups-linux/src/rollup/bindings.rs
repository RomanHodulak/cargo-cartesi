/* automatically generated by rust-bindgen 0.58.1 */
#![allow(dead_code)]
#![allow(unused_variables)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub const CARTESI_ROLLUP_ADVANCE_STATE: u32 = 0;
pub const CARTESI_ROLLUP_INSPECT_STATE: u32 = 1;
pub const CARTESI_ROLLUP_ADDRESS_SIZE: u32 = 20;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint64_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rollup_bytes {
    pub data: *mut ::std::os::raw::c_uchar,
    pub length: u64,
}
#[test]
fn bindgen_test_layout_rollup_bytes() {
    assert_eq!(
        ::std::mem::size_of::<rollup_bytes>(),
        16usize,
        concat!("Size of: ", stringify!(rollup_bytes))
    );
    assert_eq!(
        ::std::mem::align_of::<rollup_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(rollup_bytes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_bytes>())).data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rollup_bytes), "::", stringify!(data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_bytes>())).length as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(rollup_bytes), "::", stringify!(length))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rollup_input_metadata {
    pub msg_sender: [u8; 20usize],
    pub block_number: u64,
    pub timestamp: u64,
    pub epoch_index: u64,
    pub input_index: u64,
}
#[test]
fn bindgen_test_layout_rollup_input_metadata() {
    assert_eq!(
        ::std::mem::size_of::<rollup_input_metadata>(),
        56usize,
        concat!("Size of: ", stringify!(rollup_input_metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<rollup_input_metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(rollup_input_metadata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_input_metadata>())).msg_sender as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_input_metadata),
            "::",
            stringify!(msg_sender)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_input_metadata>())).block_number as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_input_metadata),
            "::",
            stringify!(block_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_input_metadata>())).timestamp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_input_metadata),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_input_metadata>())).epoch_index as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_input_metadata),
            "::",
            stringify!(epoch_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_input_metadata>())).input_index as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_input_metadata),
            "::",
            stringify!(input_index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rollup_advance_state {
    pub metadata: rollup_input_metadata,
    pub payload: rollup_bytes,
}
#[test]
fn bindgen_test_layout_rollup_advance_state() {
    assert_eq!(
        ::std::mem::size_of::<rollup_advance_state>(),
        72usize,
        concat!("Size of: ", stringify!(rollup_advance_state))
    );
    assert_eq!(
        ::std::mem::align_of::<rollup_advance_state>(),
        8usize,
        concat!("Alignment of ", stringify!(rollup_advance_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_advance_state>())).metadata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_advance_state),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_advance_state>())).payload as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_advance_state),
            "::",
            stringify!(payload)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rollup_inspect_state {
    pub payload: rollup_bytes,
}
#[test]
fn bindgen_test_layout_rollup_inspect_state() {
    assert_eq!(
        ::std::mem::size_of::<rollup_inspect_state>(),
        16usize,
        concat!("Size of: ", stringify!(rollup_inspect_state))
    );
    assert_eq!(
        ::std::mem::align_of::<rollup_inspect_state>(),
        8usize,
        concat!("Alignment of ", stringify!(rollup_inspect_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_inspect_state>())).payload as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_inspect_state),
            "::",
            stringify!(payload)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rollup_finish {
    pub accept_previous_request: bool,
    pub next_request_type: ::std::os::raw::c_int,
    pub next_request_payload_length: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rollup_finish() {
    assert_eq!(
        ::std::mem::size_of::<rollup_finish>(),
        12usize,
        concat!("Size of: ", stringify!(rollup_finish))
    );
    assert_eq!(
        ::std::mem::align_of::<rollup_finish>(),
        4usize,
        concat!("Alignment of ", stringify!(rollup_finish))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_finish>())).accept_previous_request as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_finish),
            "::",
            stringify!(accept_previous_request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_finish>())).next_request_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_finish),
            "::",
            stringify!(next_request_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_finish>())).next_request_payload_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_finish),
            "::",
            stringify!(next_request_payload_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rollup_voucher {
    pub address: [u8; 20usize],
    pub payload: rollup_bytes,
    pub index: u64,
}
#[test]
fn bindgen_test_layout_rollup_voucher() {
    assert_eq!(
        ::std::mem::size_of::<rollup_voucher>(),
        48usize,
        concat!("Size of: ", stringify!(rollup_voucher))
    );
    assert_eq!(
        ::std::mem::align_of::<rollup_voucher>(),
        8usize,
        concat!("Alignment of ", stringify!(rollup_voucher))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_voucher>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_voucher),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_voucher>())).payload as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_voucher),
            "::",
            stringify!(payload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_voucher>())).index as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(rollup_voucher), "::", stringify!(index))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rollup_notice {
    pub payload: rollup_bytes,
    pub index: u64,
}
#[test]
fn bindgen_test_layout_rollup_notice() {
    assert_eq!(
        ::std::mem::size_of::<rollup_notice>(),
        24usize,
        concat!("Size of: ", stringify!(rollup_notice))
    );
    assert_eq!(
        ::std::mem::align_of::<rollup_notice>(),
        8usize,
        concat!("Alignment of ", stringify!(rollup_notice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_notice>())).payload as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_notice),
            "::",
            stringify!(payload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_notice>())).index as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rollup_notice), "::", stringify!(index))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rollup_report {
    pub payload: rollup_bytes,
}
#[test]
fn bindgen_test_layout_rollup_report() {
    assert_eq!(
        ::std::mem::size_of::<rollup_report>(),
        16usize,
        concat!("Size of: ", stringify!(rollup_report))
    );
    assert_eq!(
        ::std::mem::align_of::<rollup_report>(),
        8usize,
        concat!("Alignment of ", stringify!(rollup_report))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rollup_report>())).payload as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rollup_report),
            "::",
            stringify!(payload)
        )
    );
}

extern "C" {
    pub fn rollup_finish_request(
        fd: ::std::os::raw::c_int,
        finish: *mut rollup_finish,
        accept: bool,
    ) -> ::std::os::raw::c_int;

    pub fn rollup_read_advance_state_request(
        fd: ::std::os::raw::c_int,
        finish: *mut rollup_finish,
        bytes: *mut rollup_bytes,
        metadata: *mut rollup_input_metadata,
    ) -> ::std::os::raw::c_int;

    pub fn rollup_read_inspect_state_request(
        fd: ::std::os::raw::c_int,
        finish: *mut rollup_finish,
        query: *mut rollup_bytes,
    ) -> ::std::os::raw::c_int;

    pub fn rollup_write_voucher(
        fd: ::std::os::raw::c_int,
        address: *mut u8,
        bytes: *mut rollup_bytes,
        voucher_index: *mut u64,
    ) -> ::std::os::raw::c_int;

    pub fn rollup_write_notice(
        fd: ::std::os::raw::c_int,
        bytes: *mut rollup_bytes,
        notice_index: *mut u64,
    ) -> ::std::os::raw::c_int;

    pub fn rollup_write_report(fd: ::std::os::raw::c_int, bytes: *mut rollup_bytes) -> ::std::os::raw::c_int;

    pub fn rollup_throw_exception(fd: ::std::os::raw::c_int, bytes: *mut rollup_bytes) -> ::std::os::raw::c_int;
}
